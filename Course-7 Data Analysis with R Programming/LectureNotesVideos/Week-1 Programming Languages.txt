Hi. Great to have you back. Earlier, you learned that
programming means giving instructions to a computer to perform an action
or set of actions. Even if this is your
first time programming, you already have plenty of experience telling a
computer what to do. For example, you've probably used a spreadsheet function to sort your data or perform
calculations, or you might have used SQL to
tell a computer how to pull data from a database or join
two different data tables. Programming goes even further. It gives you the highest level
of control over your data. SQL can communicate
with databases, but a general-purpose programming language
lets you create your own applications and build your own
functions from scratch. To program, you first need to know a
programming language. In this video, we'll
learn about the basics of programming languages and how they can help you
work with your data. Programming languages are
the words and symbols we use to write instructions
for computers to follow. You can think of a
programming language as a bridge that connects
humans and computers, and allows them to communicate. Programming languages have
their own set of rules for how these words and symbols
should be used, called syntax. Syntax shows you how to
arrange the words and symbols you enter so they
make sense to a computer. Coding is writing instructions to the computer in the syntax of a specific
programming language. Just like the variety of human languages around the world, there's lots of different
programming languages available to communicate
with computers. There's a language for almost
anything you want to do, from designing websites,
to developing video games, to working with data. For example, Python is a general-purpose language that can be used for all
sorts of things, from working with
artificial intelligence to creating virtual
reality experiences. Javascript works
well for developing online apps and is an essential
part of web browsers. Some other popular
programming languages for data analysis include
SAS, Scala, and Julia. Personally speaking, R is my favorite language
for data analysis, but you might want to explore
other languages as well. While programming languages can look different on the surface, they all share similar
structures and coding concepts. Once you learn your
first language, you'll find it easier
to learn others. Coming up, we'll explore
R's many capabilities. Before that, let's talk
about some benefits of using any programming language
to work with your data. I'll highlight three. Programming helps you clarify
the steps of your analysis, saves time, and lets you easily reproduce and
share your work. Let's start with clarity. Programming languages
have specific rules and guidelines for giving
instructions to the computer. When you're telling a
computer what to do, your instructions have
to be very clear. There can't be any inconsistency in the way you write code. If there is, the code won't work. Translating your
thoughts into code forces you to figure out
exactly how to write each step of your analysis and how
all the steps fit together. It gives your analysis a level of precision that makes
it really powerful. Using a programming language for data analysis also
saves you lots of time. For example, take the process of cleaning and
transforming your data. With one line of code, you can create a separate dataset without any missing values. With another line, you can apply multiple
filters on your data. This lets you spend
less time preparing your data and more time
on the analysis itself. Finally, programming
languages make it easy to reproduce
your analysis. Data analysis is
most useful when you can reproduce your work and
share it with other people. They can double-check it and
help you solve problems. Code automatically stores
all of the steps of your analysis so
you can reproduce, and share your work at
anytime in the future, weeks, months, or
even years later. Here's an example. Let's say
you're working on a project. You've collected and cleaned your data and started
your analysis, but the results don't add up. You suspect a mistake
was made in the process. You'd like to discuss
the issue with a teammate and get
their feedback. If you used a spreadsheet, you both might have to redo the entire analysis to
discover the error. There's no easy way to record and reproduce your
steps in a spreadsheet, but if you use a
programming language, all your work can be reproduced
and shared in a moment, from loading the data, to creating visualizations,
to reporting the results. Plus, you can easily
update your analysis and fix any errors simply
by changing the code. I hope that gives you
a better understanding of what programming
languages are all about. Next up, we'll check out R in
more detail. See you soon.