Hi, it's great to have
you back. By now we've discovered that spreadsheets and SQL have a lot of
tools in common. Earlier in this
program, we learned about COUNT in spreadsheets. Now it's time to look at
similar tools in SQL: COUNT and COUNT DISTINCT. In this video, we'll
talk about when you'd use these queries and
check out an example. Let's get started. COUNT
can be used to count the total number of
numerical values within a specific
range in spreadsheets. COUNT in SQL does the same thing. COUNT is a query that returns the number of rows in
a specified range, but COUNT DISTINCT is
a little different. COUNT DISTINCT is
a query that only returns the distinct
values in that range. Basically, this means COUNT DISTINCT doesn't count
repeating values. As a data analyst, you'll use COUNT and COUNT DISTINCT anytime you want to answer questions about how many. Like how many customers did this? Or how many transactions
where there this month? Or how many dates
are in this dataset? You'll use them throughout
the data analysis process at different stages. For example, you might need
them while you're cleaning data to check how many rows
are left in your dataset. Or you might use COUNT
and COUNT DISTINCT during the actual analysis to
answer a "how many" question. You'll run into these
kinds of questions a lot. COUNT and COUNT DISTINCT
are really useful to know. But let's check out
an example to see COUNT and COUNT
DISTINCT in action. For this example,
we're working with a company that
manufactures socks. We have two tables:
Warehouse and Orders. Let's take a quick look at these tables before
we start querying. First, we'll check out
the Warehouse table. You can see the columns here: warehouse ID, warehouse alias, the maximum capacity, the
total number of employees, and the state the
warehouse is located in. We'll pull up the top 100 rows
of the Orders table next. We can use LIMIT here to limit
the number of rows returned. This is useful if you're
working with large datasets, especially if you
just want to explore a small sample of that dataset. From this query, we're actually going to start with a FROM statement so that we
can alias our tables. Aliasing is when you
temporarily name a table or column in your query to make
it easier to read and write. Because these names
are temporary, they only last for
the given query. We can use our FROM
statement to write in what our tables' aliases
are going to be to save us some time in
other parts of the query. We'll start with FROM
and use aliasing to name the Warehouse Orders
table, just "orders." Let's say we need both
the warehouse details and the order details
because we want to report on the distribution
of orders by state. We're going to JOIN these two tables together
since we want data from both of them and alias our warehouse table
in the process. In this case, we're using
JOIN as shorthand for INNER JOIN because we want corresponding data
from both tables. Now that we have the
aliases in place, let's build out the
SELECT statement that comes before FROM. Let's run that. And there. Now we have data from
both tables joined together, and we know how to
create these handy aliases. Now, we want to count how many states are
in our ordered data. To do that, we'll use COUNT
and COUNT DISTINCT now. We can try a simple
COUNT query first. We'll JOIN the Orders and Warehouse tables in
our FROM statement. In this case we'll start with SELECT and COUNT the
number of states. Let's run this query
and see what we get. Wait, that's not quite right. This query return
over 9,000 states because we counted
every single row that included a state. But we actually want to
count the distinct states. Let's try this again
with COUNT DISTINCT. This query is going to look
similar to the last one, but we'll use DISTINCT to cut out the repeated instances
we got the last time. We'll use the query
we just built, but replace COUNT with COUNT DISTINCT in our SELECT statement. Let's try this query. That's more like it. According to these results, we have three distinct
states in our Orders data. Let's check out what
happens when we group by the state column
in the warehouse table, which we'll call warehouse dot state. We'll use JOIN and GROUP BY
in our FROM statement. Let's start there again. Then GROUP BY warehouse state. Now let's build out our SELECT
statement on top of that. We're still going to use
COUNT DISTINCT. Let's run it. Now we have three rows, one of each state represented
in the Orders data. And our COUNT DISTINCT on
the number of orders sums up the count we ran earlier: 9,999. You'll find yourself
using COUNT and COUNT DISTINCT during every stage
of the data analysis process. Understanding what these queries are and how they are
different is key. Great job, and I'll
see you again soon!